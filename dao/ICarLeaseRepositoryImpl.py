from dao.ICarLeaseRepository import ICarLeaseRepository
from entity.vehicle import Vehicle
from entity.customer import Customer
from entity.lease import Lease
from exceptions.CarNotFoundException import CarNotFoundException
from util.DBConnection import DBConnection  # âœ… Correct import
from datetime import date
import mysql.connector

class CarLeaseRepositoryImpl(ICarLeaseRepository):

    def __init__(self):
        self.connection = DBConnection.getConnection()  # âœ… Correct usage

    # ðŸš— Car Management Methods
    def addCar(self, car):
        cursor = self.connection.cursor()

        # Removed vehicle_id from the INSERT query since it's auto-generated by the database
        query = """INSERT INTO vehicle (make, model, year, dailyRate, status, passengerCapacity, engineCapacity) 
                   VALUES (%s, %s, %s, %s, %s, %s, %s)"""
        data = (
            car.get_make(), car.get_model(), car.get_year(),
            car.get_dailyRate(), car.get_status(),
            car.get_passengerCapacity(), car.get_engineCapacity()
        )
        cursor.execute(query, data)  # Execute the INSERT query
        car.set_vehicleID(cursor.lastrowid)  # Set the auto-generated vehicle_id in the Vehicle object

        self.connection.commit()  # Commit the transaction to the database

        print("âœ… Car added successfully.")

    def removeCar(self, carID: int) -> None:
        cursor = self.connection.cursor()
        query = "DELETE FROM vehicle WHERE vehicleID = %s"
        cursor.execute(query, (carID,))
        self.connection.commit()
        print("âœ… Car removed successfully.")

    def listAvailableCars(self) -> list:
        cursor = self.connection.cursor()
        query = "SELECT * FROM vehicle WHERE status = 'available'"  # Use 'status' instead of 'available'
        cursor.execute(query)
        return cursor.fetchall()

    def listRentedCars(self) -> list:
        cursor = self.connection.cursor()
        query = "SELECT * FROM vehicle WHERE status = 'notAvailable'"  # Use 'status' instead of 'available = FALSE'
        cursor.execute(query)
        return cursor.fetchall()

    def findCarById(self, carID: int) -> Vehicle:
        cursor = self.connection.cursor()
        query = "SELECT vehicleID, make, model, year, dailyRate, status, passengerCapacity, engineCapacity FROM vehicle WHERE vehicleID = %s"
        cursor.execute(query, (carID,))
        row = cursor.fetchone()
        if row:
            vehicle = Vehicle(*row[1:])
            vehicle.set_vehicleID(row[0])
            return vehicle
        else:
            print(f"Car with ID {carID} not found. Raising exception.")  # Debug log
            raise CarNotFoundException(f"Car with ID {carID} not found.")  # This should be raised

            # ðŸ‘¤ Customer Management Methods
    def addCustomer(self, customer: Customer) -> None:
        cursor = self.connection.cursor()
        # Correct query (3 placeholders, no customer_id)
        query = "INSERT INTO customer (firstName, lastName, email, phoneNumber) VALUES (%s, %s, %s, %s)"
        data = (
            customer.get_firstName(), customer.get_lastName(),
            customer.get_email(), customer.get_phoneNumber()
        )

        cursor.execute(query, data)
        self.connection.commit()
        print("âœ… Customer added successfully.")

    def removeCustomer(self, customerID: int) -> None:
        cursor = self.connection.cursor()
        query = "DELETE FROM customer WHERE customerID = %s"
        cursor.execute(query, (customerID,))
        self.connection.commit()
        print("âœ… Customer removed successfully.")

    def listCustomers(self) -> list:
        cursor = self.connection.cursor()
        query = "SELECT * FROM customer"
        cursor.execute(query)
        return cursor.fetchall()

    def findCustomerById(self, customerID: int) -> Customer:
        cursor = self.connection.cursor()
        query = "SELECT * FROM customer WHERE customerID = %s"
        cursor.execute(query, (customerID,))
        row = cursor.fetchone()
        if row:
            return Customer(*row)
        return None

    # ðŸ“œ Lease Management Methods
    def createLease(self, customerID: int, vehicleID: int, startDate: date, endDate: date,
                    lease_type: str = "DailyLease") -> Lease:
        cursor = self.connection.cursor()

        query = """INSERT INTO lease (customerID, vehicleID, startDate, endDate, type)
                   VALUES (%s, %s, %s, %s, %s)"""

        cursor.execute(query, (customerID, vehicleID, startDate, endDate, lease_type))
        self.connection.commit()

        lease_id = cursor.lastrowid
        print("âœ… Lease created successfully.")
        return Lease(lease_id, customerID, vehicleID, startDate, endDate, lease_type)

    def returnCar(self, leaseID: int) -> Lease:
        cursor = self.connection.cursor()

        # 1. Mark lease as inactive
        query = "UPDATE lease SET active = FALSE WHERE leaseID = %s"
        cursor.execute(query, (leaseID,))

        # 2. Fetch lease info
        lease = self.findLeaseById(leaseID)

        # 3. Update vehicle status
        if lease:
            query = "UPDATE vehicle SET status = 'available' WHERE vehicleID = %s"
            cursor.execute(query, (lease.get_vehicleID(),))

        self.connection.commit()
        print("âœ… Lease returned and car status updated to available.")
        return lease

    def listActiveLeases(self) -> list:
        cursor = self.connection.cursor()
        query = "SELECT * FROM lease WHERE active = TRUE"
        cursor.execute(query)
        return cursor.fetchall()

    def listLeaseHistory(self) -> list:
        cursor = self.connection.cursor()
        query = "SELECT * FROM lease WHERE active = FALSE"
        cursor.execute(query)
        return cursor.fetchall()

    def findLeaseById(self, leaseID: int) -> Lease:
        cursor = self.connection.cursor()
        query = "SELECT * FROM lease WHERE leaseId = %s"
        cursor.execute(query, (leaseID,))
        row = cursor.fetchone()
        if row:
            return Lease(*row)
        return None

    # ðŸ’° Payment Handling
    def recordPayment(self, lease: Lease, amount: float) -> None:
        cursor = self.connection.cursor()
        query = "INSERT INTO payment (leaseID, amount, paymentDate) VALUES (%s, %s, CURDATE())"
        cursor.execute(query, (lease.get_leaseID(), amount))
        self.connection.commit()
        print("âœ… Payment recorded successfully.")
